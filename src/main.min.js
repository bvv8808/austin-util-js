(function () {
  __observer__ = null;
  _observe = (doms, fnAppear = null, fnDisappear = null, options = {}) => {
    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        entry.isIntersecting
          ? fnAppear && fnAppear(entry.target)
          : fnDisappear && fnDisappear(entry.target);
      });
    }, options);

    doms.__proto__.hasOwnProperty("unshift")
      ? doms.forEach((dom) => observer.observe(dom))
      : observer.observe(doms);

    __observer__ = observer;
    console.log("#observe: ", __observer__);
  };

  _unobserve = (doms) => {
    doms.__proto__.hasOwnProperty("unshift")
      ? doms.forEach((dom) => __observer__.unobserve(dom))
      : __observer__.unobserve(doms);

    console.log("#unobserve: ", __observer__);
  };

  _scroll = (mode, fn) => {
    const isFirefox =
      navigator.userAgent.indexOf("Firefox") === -1 ? false : true;
    window.addEventListener(isFirefox ? "wheel" : "DOMMouseScroll", (e) => {
      const delta = isFirefox ? -e.detail : e.wheelDelta;
      if (mode === "up") delta > 0 && fn();
      else if (mode === "down") delta < 0 && fn();
      else
        console.warn("Invalid scroll direction. direction is 'up' or 'down'.");
    });
  };

  // main
  $_ = function (selector) {
    let dom = document.querySelector(selector);
    dom.hide = function () {
      dom.style.display = "none";
    };
    dom.show = function (displayMode = "block") {
      if (
        [
          "block",
          "inline",
          "inline-block",
          "flex",
          "table-cell",
          "table",
          "grid",
        ].indexOf(displayMode) === -1
      )
        console.warn(
          "Invalid display value. Please confirm DOM.show(displayMode)."
        );

      dom.style.display = displayMode;
    };

    dom._observe = _observe;

    return dom;
  };
})();
